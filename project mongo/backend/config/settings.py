"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.24.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-kw@^s886()wx@=#e8p2b_3mx9k**r2%fz4-=7-l88okvkew(^y'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"] if os.getenv("DJANGO_ALLOWED_HOSTS") == "*" else os.getenv("DJANGO_ALLOWED_HOSTS", "").split(",")



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app',
    'rest_framework',
    'corsheaders'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",   # PostgreSQL 엔진
#         "NAME": "postgres",                      # 데이터베이스 이름
#         "USER": "postgres",                      # DB 사용자
#         "PASSWORD": "0000",                 # 비밀번호
#         "HOST": "localhost",                         # DB 서버 주소 (원격이면 IP/도메인)
#         "PORT": "5432",                              # 기본 포트
#     }
# }
#MongoDB용
# DATABASES = {
#     'default': {
#         'ENGINE': 'djongo',
#         'NAME': os.getenv("MONGO_DB_NAME", "mydb"),  # MongoDB의 DB 이름
#         'CLIENT': {
#             'host': os.getenv("MONGO_HOST", "localhost"),
#             'port': int(os.getenv("MONGO_PORT", 27017)),
#             'username': os.getenv("MONGO_DB_USERNAME", "je"),
#             'password': os.getenv("MONGO_DB_PASSWORD", "0000"),
#             'authSource': 'mydb',          # 인증 DB (기본값: admin)
#         }
#     }
# }

#===== MongoDB (Djongo) =====
DATABASES = {
    "default": {
        "ENGINE": "djongo",
        "NAME": os.getenv("MONGOD_DB"),                  # DB 이름
        "CLIENT": {
            "host": os.getenv("MONGOD_HOST"),
            "port": 27017,
            "username": os.getenv("MONGOD_USER"),
            "password": os.getenv("MONGOD_PASSWORD"),
            "authSource": "admin",       # 계정 만든 DB (보통 admin)
        },
    }
}

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",   # PostgreSQL 엔진
#         "NAME": "mydb",                      # 데이터베이스 이름
#         "USER": "kogo",                      # DB 사용자
#         "PASSWORD": "1234",                 # 비밀번호
#         "HOST": "db",                         # DB 서버 주소 (원격이면 IP/도메인)
#         "PORT": "5432",                              # 기본 포트
#     }
# }

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",
#         "NAME": os.getenv("POSTGRES_DB"),
#         "USER": os.getenv("POSTGRES_USER"),
#         "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
#         "HOST": os.getenv("DB_HOST", "my_postgres_db"),
#         "PORT": os.getenv("DB_PORT", "5432"),
#     }
# }



# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = False

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

raw_cors = os.getenv("CORS_ALLOWED_ORIGINS", "")
CORS_ALLOWED_ORIGINS = [c.strip() for c in raw_cors.split(",") if c.strip()]
# ===== CORS =====
CORS_ALLOW_ALL_ORIGINS = False
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",
#     "http://localhost:5173",  # Vite
#     "http://127.0.0.1:5173",
# ]
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = ["*"]
CORS_ALLOW_METHODS = ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"]

# (선택) DRF 기본 설정
REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
    ],
}
